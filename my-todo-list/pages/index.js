import Head from 'next/head'
import Image from 'next/image'
import TodoList from '../components/TodoList';
import styles from '../styles/Home.module.css';
import CreateTodoModal from '../components/CreateTodoModal';
import { useEffect, useState } from 'react';
import EditTodoModal from '../components/EditTodoModal';

export default function Home() {
  // declaring som logical states
  const [todoList, setTodoList] = useState([]);
  const [todoArchive, setTodoArchive] = useState([]);
  const [isReRender, setisReRender] = useState(false);
  const [currentTodoId, setCurrentTodoId] = useState(null);
  // todo list source of truth
  const todoListData = todoList;
  // archived todos if we needed in archive logs.
  const todoArchiveData = todoArchive;
  
  // a logical function to handle create ne todo.
  const handleAddNewTodo = (newValue) => {
    setTodoList(oldArray => [...oldArray,newValue]);

  }
  //  a logical function to get the targeted todo obj from the todo list array
  const filterTodo = (id) => {
    let result = todoListData.find(item => item.todo_id === id);
    return result;
  }
  // a logical function to handle if todo is id finished or not.
  const handleEditCheckTodo = (todo_id, checked) => {
    if(checked) {
      filterTodo(todo_id).finished_at = new Date().toLocaleString();
    } else {
      filterTodo(todo_id).finished_at = undefined;
      filterTodo(todo_id).archive_at = undefined;
    }
    handleRerender()
  }
  //  a logical function to handle edit todo 
  const handleEditTodo = (todo_id) => {
    setCurrentTodoId(todo_id);
  }
  // a logical function to handle delete todo 
  const handleDeleteTodo = (todo_id) => {
    const index = todoListData.indexOf(filterTodo(todo_id))
    todoListData.splice(index, 1)
  }
  // a logical function to handle archiving todo 
  const handleArchiveTodo = (todo_id) => {
    const newVal = filterTodo(todo_id);
    newVal.archive_at = new Date().toLocaleString();
    setTodoArchive(oldArray => [...oldArray, newVal]);
    // handleDeleteTodo();
  }
  // a logical function to emit a rerender action. 
  const handleRerender = () => {
    setisReRender(!isReRender);
  }

  useEffect(() => {}, [isReRender])
  

  return (
    <div className={styles.container}>
      <Head>
        <title>Todo List</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className='container-fluid'>
        <TodoList 
        todoList={todoListData} 
        handleEditCheckTodo={handleEditCheckTodo} 
        handleEditTodo={handleEditTodo} 
        handleDeleteTodo={handleDeleteTodo}
        handleRerender={handleRerender}
        handleArchiveTodo={handleArchiveTodo} />
      </div>
      <CreateTodoModal handleAddNewTodo={handleAddNewTodo}  />
      {todoListData.length == 1 && <EditTodoModal 
      currentTodoId={currentTodoId} 
      todoListData={todoListData} 
      handleRerender={handleRerender}
      filterTodo={filterTodo} />}
    </div>
  )
}
